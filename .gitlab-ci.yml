# GitLab CI/CD Pipeline para Histoguia
# Plataforma de Estudo de Histologia

# Definir imagem base
image: node:18-alpine

# Vari√°veis globais
variables:
  NODE_ENV: "production"
  VITE_BASE_URL: "/"
  
# Cache para otimizar builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/

# Est√°gios do pipeline
stages:
  - install
  - lint
  - build
  - test
  - deploy

# Est√°gio 1: Instala√ß√£o de depend√™ncias
install_dependencies:
  stage: install
  script:
    - echo "üîß Instalando depend√™ncias..."
    - npm ci --cache .npm --prefer-offline
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour
  only:
    - main
    - develop
    - merge_requests

# Est√°gio 2: Linting e verifica√ß√£o de c√≥digo
code_quality:
  stage: lint
  dependencies:
    - install_dependencies
  script:
    - echo "üîç Executando verifica√ß√µes de qualidade de c√≥digo..."
    - npm run lint
  allow_failure: false
  only:
    - main
    - develop
    - merge_requests

# Est√°gio 3: Build da aplica√ß√£o
build_application:
  stage: build
  dependencies:
    - install_dependencies
  script:
    - echo "üèóÔ∏è Construindo aplica√ß√£o..."
    - echo "Ambiente: $DEPLOY_ENV"
    - echo "Base URL: $VITE_BASE_URL"
    - npm run build
    - echo "‚úÖ Build conclu√≠do com sucesso!"
    - ls -la dist/
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

# Est√°gio 4: Testes (placeholder para futuros testes)
test_application:
  stage: test
  dependencies:
    - install_dependencies
  script:
    - echo "üß™ Executando testes..."
    - echo "‚ö†Ô∏è Testes n√£o implementados ainda"
    - echo "‚úÖ Testes passaram (placeholder)"
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

# Est√°gio 5: Deploy para GitLab Pages (Produ√ß√£o)
deploy_pages:
  stage: deploy
  dependencies:
    - build_application
  script:
    - echo "üöÄ Preparando deploy para GitLab Pages..."
    - mkdir public
    - cp -r dist/* public/
    - echo "‚úÖ Deploy preparado!"
  artifacts:
    paths:
      - public
    expire_in: 1 week
  variables:
    DEPLOY_ENV: "production"
    VITE_BASE_URL: "/$CI_PROJECT_NAME/"
  only:
    - main
  environment:
    name: production
    url: https://$CI_PROJECT_NAMESPACE.gitlab.io/$CI_PROJECT_NAME

# Deploy para ambiente de desenvolvimento
deploy_staging:
  stage: deploy
  dependencies:
    - build_application
  script:
    - echo "üöÄ Deploy para ambiente de staging..."
    - echo "Simulando deploy para servidor de staging..."
    - echo "URL: https://staging.histoguia.com"
    - echo "‚úÖ Deploy de staging conclu√≠do!"
  variables:
    DEPLOY_ENV: "staging"
    VITE_BASE_URL: "/"
  only:
    - develop
  environment:
    name: staging
    url: https://staging.histoguia.com
  when: manual

# Deploy via FTP/SFTP (configura√ß√£o manual necess√°ria)
deploy_ftp:
  stage: deploy
  dependencies:
    - build_application
  script:
    - echo "üì° Deploy via FTP/SFTP..."
    - echo "‚ö†Ô∏è Configure as vari√°veis FTP_HOST, FTP_USER, FTP_PASSWORD no GitLab CI/CD"
    - echo "Exemplo de comando: lftp -c 'set ftp:ssl-allow no; open -u $FTP_USER,$FTP_PASSWORD $FTP_HOST; mirror -R dist/ /public_html/'"
    - echo "‚úÖ Deploy FTP configurado (necessita configura√ß√£o manual)"
  variables:
    DEPLOY_ENV: "production"
  only:
    - main
  when: manual
  environment:
    name: production-ftp
    url: $PRODUCTION_URL

# Limpeza de cache (job manual)
clear_cache:
  stage: deploy
  script:
    - echo "üßπ Limpando cache..."
    - rm -rf node_modules/
    - rm -rf .npm/
    - echo "‚úÖ Cache limpo!"
  when: manual
  allow_failure: true

# Configura√ß√µes adicionais para diferentes ambientes
.deploy_template: &deploy_template
  before_script:
    - echo "üåç Configurando ambiente $DEPLOY_ENV"
    - echo "Base URL configurada para: $VITE_BASE_URL"
  after_script:
    - echo "üìä Estat√≠sticas do build:"
    - du -sh dist/
    - find dist/ -name "*.js" -o -name "*.css" | wc -l
    - echo "‚úÖ Deploy finalizado!"