# Script PowerShell para criar automaticamente a estrutura de um novo tema no Histoguia
# Autor: Sistema Histoguia
# Data: 2025-09-12

# Configura√ß√µes de cores
$Host.UI.RawUI.ForegroundColor = "White"

function Write-ColorOutput($ForegroundColor) {
    param([String[]]$Object, [ConsoleColor]$ForegroundColor)
    $DefaultForegroundColor = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $ForegroundColor
    Write-Output $Object
    $Host.UI.RawUI.ForegroundColor = $DefaultForegroundColor
}

function Show-Banner {
    Clear-Host
    Write-ColorOutput -ForegroundColor Magenta "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    Write-ColorOutput -ForegroundColor Magenta "‚ïë                                                              ‚ïë"
    Write-ColorOutput -ForegroundColor Magenta "‚ïë                   üî¨ HISTOGUIA BUILDER üî¨                   ‚ïë"
    Write-ColorOutput -ForegroundColor Magenta "‚ïë                                                              ‚ïë"
    Write-ColorOutput -ForegroundColor Magenta "‚ïë              Gerador Autom√°tico de Temas                     ‚ïë"
    Write-ColorOutput -ForegroundColor Magenta "‚ïë                                                              ‚ïë"
    Write-ColorOutput -ForegroundColor Magenta "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    Write-Output ""
}

function Log-Info($message) {
    Write-ColorOutput -ForegroundColor Blue "[INFO] $message"
}

function Log-Success($message) {
    Write-ColorOutput -ForegroundColor Green "[‚úÖ] $message"
}

function Log-Warning($message) {
    Write-ColorOutput -ForegroundColor Yellow "[‚ö†Ô∏è] $message"
}

function Log-Error($message) {
    Write-ColorOutput -ForegroundColor Red "[‚ùå] $message"
}

function Log-Step($message) {
    Write-ColorOutput -ForegroundColor Cyan "[üîÑ] $message"
}

function Test-ThemeName($name) {
    return $name -match "^[a-z0-9-]+$" -and $name -notmatch "^-" -and $name -notmatch "-$"
}

function Get-UserInput {
    Show-Banner
    Write-ColorOutput -ForegroundColor White "üìù COLETA DE INFORMA√á√ïES"
    Write-ColorOutput -ForegroundColor Cyan "Por favor, forne√ßa as informa√ß√µes necess√°rias para criar o novo tema:"
    Write-Output ""
    
    # Nome do tema
    do {
        Write-ColorOutput -ForegroundColor Yellow "1. Nome do tema (formato: tecido-epitelial, sistema-nervoso):"
        $script:THEME_NAME = Read-Host "   ‚Üí "
        
        if (-not (Test-ThemeName $script:THEME_NAME)) {
            Log-Error "Nome inv√°lido! Use apenas letras min√∫sculas, n√∫meros e h√≠fens (n√£o no in√≠cio/fim)"
        }
    } while (-not (Test-ThemeName $script:THEME_NAME))
    
    # Nome formatado para exibi√ß√£o
    Write-ColorOutput -ForegroundColor Yellow "2. Nome para exibi√ß√£o (ex: Tecido Epitelial, Sistema Nervoso):"
    $script:DISPLAY_NAME = Read-Host "   ‚Üí "
    
    # Descri√ß√£o do tema
    Write-ColorOutput -ForegroundColor Yellow "3. Descri√ß√£o do tema:"
    $script:THEME_DESCRIPTION = Read-Host "   ‚Üí "
    
    # Palavras-chave
    Write-ColorOutput -ForegroundColor Yellow "4. Palavras-chave (separadas por v√≠rgula):"
    $script:KEYWORDS = Read-Host "   ‚Üí "
    
    # N√∫mero de imagens
    do {
        Write-ColorOutput -ForegroundColor Yellow "5. Quantas imagens histol√≥gicas voc√™ tem? (1-10):"
        $script:NUM_IMAGES = Read-Host "   ‚Üí "
        
        if ($script:NUM_IMAGES -notmatch "^([1-9]|10)$") {
            Log-Error "Por favor, digite um n√∫mero entre 1 e 10"
        }
    } while ($script:NUM_IMAGES -notmatch "^([1-9]|10)$")
    
    # N√∫mero de quest√µes te√≥ricas
    do {
        Write-ColorOutput -ForegroundColor Yellow "6. Quantas quest√µes TE√ìRICAS voc√™ quer criar? (1-20):"
        $script:NUM_THEORETICAL = Read-Host "   ‚Üí "
        
        if ($script:NUM_THEORETICAL -notmatch "^([1-9]|1[0-9]|20)$") {
            Log-Error "Por favor, digite um n√∫mero entre 1 e 20"
        }
    } while ($script:NUM_THEORETICAL -notmatch "^([1-9]|1[0-9]|20)$")
    
    # N√∫mero de quest√µes pr√°ticas
    do {
        Write-ColorOutput -ForegroundColor Yellow "7. Quantas quest√µes PR√ÅTICAS voc√™ quer criar? (1-20):"
        $script:NUM_PRACTICAL = Read-Host "   ‚Üí "
        
        if ($script:NUM_PRACTICAL -notmatch "^([1-9]|1[0-9]|20)$") {
            Log-Error "Por favor, digite um n√∫mero entre 1 e 20"
        }
    } while ($script:NUM_PRACTICAL -notmatch "^([1-9]|1[0-9]|20)$")
    
    # Confirma√ß√£o
    Write-Output ""
    Write-ColorOutput -ForegroundColor White "üìã RESUMO DAS INFORMA√á√ïES:"
    Write-ColorOutput -ForegroundColor Cyan "Nome do tema: $script:THEME_NAME"
    Write-ColorOutput -ForegroundColor Cyan "Nome de exibi√ß√£o: $script:DISPLAY_NAME"
    Write-ColorOutput -ForegroundColor Cyan "Descri√ß√£o: $script:THEME_DESCRIPTION"
    Write-ColorOutput -ForegroundColor Cyan "Palavras-chave: $script:KEYWORDS"
    Write-ColorOutput -ForegroundColor Cyan "Imagens: $script:NUM_IMAGES"
    Write-ColorOutput -ForegroundColor Cyan "Quest√µes te√≥ricas: $script:NUM_THEORETICAL"
    Write-ColorOutput -ForegroundColor Cyan "Quest√µes pr√°ticas: $script:NUM_PRACTICAL"
    Write-Output ""
    
    do {
        Write-ColorOutput -ForegroundColor Yellow "Confirma a cria√ß√£o? (s/n):"
        $confirm = Read-Host "   ‚Üí "
        
        switch ($confirm.ToLower()) {
            "s" { return $true }
            "n" { 
                Log-Info "Opera√ß√£o cancelada pelo usu√°rio"
                exit 0
            }
            default { Log-Error "Digite 's' para sim ou 'n' para n√£o" }
        }
    } while ($true)
}

function New-DirectoryStructure {
    Log-Step "Criando estrutura de diret√≥rios..."
    
    # Diret√≥rio principal do tema
    $script:THEME_DIR = "src\data\temas\$script:THEME_NAME"
    New-Item -Path $script:THEME_DIR -ItemType Directory -Force | Out-Null
    New-Item -Path "$script:THEME_DIR\images" -ItemType Directory -Force | Out-Null
    
    # Diret√≥rio de imagens p√∫blicas
    $script:PUBLIC_IMAGES_DIR = "public\images\temas\$script:THEME_NAME"
    New-Item -Path $script:PUBLIC_IMAGES_DIR -ItemType Directory -Force | Out-Null
    
    Log-Success "Estrutura de diret√≥rios criada"
}

function New-TheoreticalQuestions {
    Log-Step "Gerando arquivo de quest√µes te√≥ricas..."
    
    $questionsFile = "$script:THEME_DIR\questoes-teoricas.json"
    $keywords = $script:KEYWORDS.Split(',')[0].Trim()
    
    $content = @"
{
  "tema": "$script:THEME_NAME",
  "questoes": [
"@

    for ($i = 1; $i -le [int]$script:NUM_THEORETICAL; $i++) {
        $comma = if ($i -lt [int]$script:NUM_THEORETICAL) { "," } else { "" }
        $content += @"

    {
      "numero": $i,
      "enunciado": "Quest√£o te√≥rica $i sobre $script:DISPLAY_NAME. [SUBSTITUIR POR ENUNCIADO REAL]",
      "alternativas": [
        "Alternativa A - [SUBSTITUIR]",
        "Alternativa B - [SUBSTITUIR]",
        "Alternativa C - [SUBSTITUIR]",
        "Alternativa D - [SUBSTITUIR]"
      ],
      "resposta_correta": 0,
      "explicacao": "Explica√ß√£o detalhada da resposta correta. [SUBSTITUIR]",
      "tags": ["$keywords", "$($script:DISPLAY_NAME.ToLower())"],
      "subtopico": "Subt√≥pico $i",
      "dificuldade": "intermediario"
    }$comma
"@
    }
    
    $content += @"

  ]
}
"@

    $content | Out-File -FilePath $questionsFile -Encoding UTF8
    Log-Success "Quest√µes te√≥ricas geradas: $questionsFile"
}

function New-PracticalQuestions {
    Log-Step "Gerando arquivo de quest√µes pr√°ticas..."
    
    $questionsFile = "$script:THEME_DIR\questoes-praticas.json"
    
    $content = "["
    
    for ($i = 1; $i -le [int]$script:NUM_PRACTICAL; $i++) {
        $imageNum = (($i - 1) % [int]$script:NUM_IMAGES) + 1
        $comma = if ($i -lt [int]$script:NUM_PRACTICAL) { "," } else { "" }
        
        $content += @"

  {
    "id": $i,
    "tema": "$script:THEME_NAME",
    "imagem": "/images/temas/$script:THEME_NAME/image$imageNum.jpg",
    "enunciado": "Analise a l√¢mina histol√≥gica apresentada sobre $script:DISPLAY_NAME. [SUBSTITUIR POR ENUNCIADO REAL]",
    "alternativas": [
      {
        "texto": "Alternativa A sobre $script:DISPLAY_NAME",
        "explicacao": "Explica√ß√£o da alternativa A. [SUBSTITUIR]"
      },
      {
        "texto": "Alternativa B sobre $script:DISPLAY_NAME",
        "explicacao": "Correto! Explica√ß√£o da resposta correta. [SUBSTITUIR]"
      },
      {
        "texto": "Alternativa C sobre $script:DISPLAY_NAME",
        "explicacao": "Incorreto. Explica√ß√£o do por que est√° errado. [SUBSTITUIR]"
      },
      {
        "texto": "Alternativa D sobre $script:DISPLAY_NAME",
        "explicacao": "Incorreto. Explica√ß√£o do por que est√° errado. [SUBSTITUIR]"
      }
    ],
    "respostaCorreta": 1
  }$comma
"@
    }
    
    $content += "`n]"
    $content | Out-File -FilePath $questionsFile -Encoding UTF8
    Log-Success "Quest√µes pr√°ticas geradas: $questionsFile"
}

function Update-ImagesConfig {
    Log-Step "Atualizando configura√ß√£o de imagens..."
    
    $configFile = "src\utils\imagens.ts"
    
    # Backup do arquivo original
    Copy-Item $configFile "$configFile.backup"
    
    # Ler conte√∫do atual
    $content = Get-Content $configFile -Raw
    
    # Substituir a linha do sistema-circulatorio
    $oldLine = "'sistema-circulatorio': 0 // Ainda n√£o implementado"
    $newLine = "'sistema-circulatorio': 0, // Ainda n√£o implementado`n  '$script:THEME_NAME': $script:NUM_IMAGES        // Adicionado automaticamente"
    
    $content = $content -replace [regex]::Escape($oldLine), $newLine
    
    $content | Out-File -FilePath $configFile -Encoding UTF8 -NoNewline
    
    Log-Success "Configura√ß√£o de imagens atualizada"
}

function New-ImagePlaceholders {
    Log-Step "Criando placeholders para imagens..."
    
    for ($i = 1; $i -le [int]$script:NUM_IMAGES; $i++) {
        $placeholderFile = "$script:PUBLIC_IMAGES_DIR\image$i.txt"
        
        $content = @"
PLACEHOLDER PARA IMAGEM $i
========================

Este √© um placeholder para a imagem $i do tema "$script:DISPLAY_NAME".

Para substituir:
1. Coloque sua imagem histol√≥gica aqui: $script:PUBLIC_IMAGES_DIR\image$i.jpg
2. Certifique-se de que o formato seja JPG
3. Resolu√ß√£o recomendada: 800x600 ou maior
4. Remova este arquivo .txt ap√≥s adicionar a imagem real

Tema: $script:THEME_NAME
Imagem: image$i.jpg
"@
        
        $content | Out-File -FilePath $placeholderFile -Encoding UTF8
    }
    
    Log-Success "Placeholders de imagens criados"
}

function New-ThemeDocumentation {
    Log-Step "Gerando documenta√ß√£o do tema..."
    
    $docFile = "$script:THEME_DIR\README.md"
    $currentDate = Get-Date -Format "yyyy-MM-dd"
    
    $content = @"
# Tema: $script:DISPLAY_NAME

## Informa√ß√µes Gerais
- **Nome do tema**: $script:THEME_NAME
- **Nome de exibi√ß√£o**: $script:DISPLAY_NAME
- **Descri√ß√£o**: $script:THEME_DESCRIPTION
- **Palavras-chave**: $script:KEYWORDS
- **Data de cria√ß√£o**: $currentDate

## Estrutura de Arquivos
``````
$script:THEME_DIR\
‚îú‚îÄ‚îÄ README.md                    # Esta documenta√ß√£o
‚îú‚îÄ‚îÄ questoes-teoricas.json       # $script:NUM_THEORETICAL quest√µes te√≥ricas
‚îú‚îÄ‚îÄ questoes-praticas.json       # $script:NUM_PRACTICAL quest√µes pr√°ticas
‚îî‚îÄ‚îÄ images\                      # Imagens locais (opcional)
    ‚îú‚îÄ‚îÄ image1.jpg
    ‚îú‚îÄ‚îÄ image2.jpg
    ‚îî‚îÄ‚îÄ ...
``````

## Imagens Necess√°rias
Voc√™ precisa adicionar $script:NUM_IMAGES imagens histol√≥gicas em:
- ``public\images\temas\$script:THEME_NAME\``

### Especifica√ß√µes das Imagens:
- **Formato**: JPG ou PNG
- **Resolu√ß√£o m√≠nima**: 800x600px
- **Resolu√ß√£o recomendada**: 1200x900px
- **Nomenclatura**: image1.jpg, image2.jpg, ..., image$script:NUM_IMAGES.jpg

## Quest√µes a Revisar

### Quest√µes Te√≥ricas ($script:NUM_THEORETICAL quest√µes)
- [ ] Revisar enunciados
- [ ] Verificar alternativas
- [ ] Confirmar respostas corretas
- [ ] Ajustar explica√ß√µes
- [ ] Validar tags e subt√≥picos

### Quest√µes Pr√°ticas ($script:NUM_PRACTICAL quest√µes)
- [ ] Revisar enunciados
- [ ] Associar com imagens corretas
- [ ] Verificar alternativas
- [ ] Confirmar respostas corretas
- [ ] Ajustar explica√ß√µes

## Implementa√ß√£o

### 1. Adicionar Imagens
``````powershell
# Copie suas imagens para:
Copy-Item suas_imagens\* public\images\temas\$script:THEME_NAME\
``````

### 2. Testar o Tema
``````powershell
# Execute o projeto
npm run dev

# Acesse:
# - Quest√µes Te√≥ricas: http://localhost:5173/questoes-teoricas
# - Quest√µes Pr√°ticas: http://localhost:5173/questoes-praticas
``````

### 3. Validar Quest√µes
1. Selecione o tema "$script:DISPLAY_NAME" no dropdown
2. Verifique se as imagens carregam corretamente
3. Teste todas as quest√µes
4. Confirme as respostas e explica√ß√µes

## Pr√≥ximos Passos
1. ‚úÖ Estrutura criada automaticamente
2. üîÑ Adicionar imagens histol√≥gicas reais
3. üîÑ Revisar e ajustar quest√µes te√≥ricas
4. üîÑ Revisar e ajustar quest√µes pr√°ticas
5. üîÑ Testar funcionalidade completa
6. üîÑ Documentar especificidades do tema

## Notas de Desenvolvimento
- As quest√µes foram geradas com placeholders que devem ser substitu√≠dos
- A resposta correta padr√£o √© a alternativa B (√≠ndice 1)
- Tags incluem palavras-chave fornecidas
- Dificuldade padr√£o: "intermediario"

## Suporte
Para d√∫vidas sobre a implementa√ß√£o, consulte:
- GUIA_EXPANSAO.md
- GUIA_RAPIDO.md
- PROPOSTA_CACHE_PERFORMANCE.md
"@

    $content | Out-File -FilePath $docFile -Encoding UTF8
    Log-Success "Documenta√ß√£o do tema gerada: $docFile"
}

function Show-FinalInstructions {
    Clear-Host
    Show-Banner
    
    Write-ColorOutput -ForegroundColor Green "üéâ TEMA CRIADO COM SUCESSO! üéâ"
    Write-Output ""
    Write-ColorOutput -ForegroundColor White "üìã ESTRUTURA CRIADA:"
    Write-ColorOutput -ForegroundColor Cyan "‚îú‚îÄ‚îÄ $script:THEME_DIR\"
    Write-ColorOutput -ForegroundColor Cyan "‚îÇ   ‚îú‚îÄ‚îÄ README.md"
    Write-ColorOutput -ForegroundColor Cyan "‚îÇ   ‚îú‚îÄ‚îÄ questoes-teoricas.json"
    Write-ColorOutput -ForegroundColor Cyan "‚îÇ   ‚îú‚îÄ‚îÄ questoes-praticas.json"
    Write-ColorOutput -ForegroundColor Cyan "‚îÇ   ‚îî‚îÄ‚îÄ images\"
    Write-ColorOutput -ForegroundColor Cyan "‚îî‚îÄ‚îÄ $script:PUBLIC_IMAGES_DIR\"
    Write-Output ""
    
    Write-ColorOutput -ForegroundColor White "üîß PR√ìXIMOS PASSOS OBRIGAT√ìRIOS:"
    Write-Output ""
    Write-ColorOutput -ForegroundColor Yellow "1. ADICIONAR IMAGENS:"
    Write-Output "   Copie $script:NUM_IMAGES imagens histol√≥gicas para:"
    Write-ColorOutput -ForegroundColor Cyan "   $script:PUBLIC_IMAGES_DIR\"
    Write-Output "   Nomeie como: image1.jpg, image2.jpg, ..., image$script:NUM_IMAGES.jpg"
    Write-Output ""
    
    Write-ColorOutput -ForegroundColor Yellow "2. REVISAR QUEST√ïES:"
    Write-ColorOutput -ForegroundColor Cyan "   $script:THEME_DIR\questoes-teoricas.json"
    Write-ColorOutput -ForegroundColor Cyan "   $script:THEME_DIR\questoes-praticas.json"
    Write-Output "   ‚Ä¢ Substitua todos os [SUBSTITUIR]"
    Write-Output "   ‚Ä¢ Verifique respostas corretas"
    Write-Output "   ‚Ä¢ Ajuste explica√ß√µes"
    Write-Output ""
    
    Write-ColorOutput -ForegroundColor Yellow "3. TESTAR IMPLEMENTA√á√ÉO:"
    Write-ColorOutput -ForegroundColor Cyan "   npm run dev"
    Write-Output "   Acesse e teste o tema '$script:DISPLAY_NAME'"
    Write-Output ""
    
    Write-ColorOutput -ForegroundColor White "üìö DOCUMENTA√á√ÉO:"
    Write-ColorOutput -ForegroundColor Cyan "   Leia: $script:THEME_DIR\README.md"
    Write-Output ""
    
    Write-ColorOutput -ForegroundColor White "‚ö†Ô∏è  IMPORTANTE:"
    Write-ColorOutput -ForegroundColor Red "   O tema foi configurado mas precisa de revis√£o manual!"
    Write-ColorOutput -ForegroundColor Red "   N√£o esque√ßa de adicionar as imagens reais."
    Write-Output ""
    
    Write-ColorOutput -ForegroundColor Green "‚ú® Tema '$script:DISPLAY_NAME' pronto para desenvolvimento! ‚ú®"
}

# Script Principal
function Main {
    # Verificar se estamos no diret√≥rio correto
    if (-not (Test-Path "src") -or -not (Test-Path "package.json")) {
        Log-Error "Execute este script no diret√≥rio raiz do projeto Histoguia"
        exit 1
    }
    
    # Coletar informa√ß√µes do usu√°rio
    if (Get-UserInput) {
        # Executar cria√ß√£o
        Log-Step "Iniciando cria√ß√£o do tema '$script:THEME_NAME'..."
        
        New-DirectoryStructure
        New-TheoreticalQuestions
        New-PracticalQuestions
        Update-ImagesConfig
        New-ImagePlaceholders
        New-ThemeDocumentation
        
        # Exibir instru√ß√µes finais
        Show-FinalInstructions
    }
}

# Executar script principal
Main
